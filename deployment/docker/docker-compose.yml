# MDT医疗智能体系统 Docker Compose配置
# 文件路径: deployment/docker/docker-compose.yml
# 作者: Tianyu (系统集成)
# 功能: 多容器服务编排

version: '3.8'

services:
  # 主应用服务
  mdt-app:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile
    container_name: mdt_medical_app
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ../../data:/app/data
      - ../../results:/app/results
      - ../../logs:/app/logs
      - ../../config:/app/config
    environment:
      - PYTHONPATH=/app
      - MDT_ENV=production
      - MDT_LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://mdt_user:mdt_password@postgres:5432/mdt_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    networks:
      - mdt_network
    command: ["python", "-m", "uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000"]

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: mdt_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=mdt_db
      - POSTGRES_USER=mdt_user
      - POSTGRES_PASSWORD=mdt_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../deployment/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - mdt_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mdt_user -d mdt_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: mdt_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass mdt_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mdt_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Jupyter Notebook服务 (开发环境)
  jupyter:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.jupyter
    container_name: mdt_jupyter
    restart: unless-stopped
    ports:
      - "8888:8888"
    volumes:
      - ../../:/app
      - ../../notebooks:/app/notebooks
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=mdt_jupyter_token
    networks:
      - mdt_network
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--NotebookApp.token=mdt_jupyter_token"]
    profiles:
      - dev

  # Streamlit Web界面
  streamlit:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.streamlit
    container_name: mdt_streamlit
    restart: unless-stopped
    ports:
      - "8501:8501"
    volumes:
      - ../../:/app
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    networks:
      - mdt_network
    depends_on:
      - mdt-app
    command: ["streamlit", "run", "src/web/streamlit_app.py"]
    profiles:
      - ui

  # MongoDB (可选的文档数据库)
  mongodb:
    image: mongo:6-jammy
    container_name: mdt_mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mdt_admin
      - MONGO_INITDB_ROOT_PASSWORD=mdt_mongo_password
      - MONGO_INITDB_DATABASE=mdt_knowledge
    volumes:
      - mongodb_data:/data/db
      - ../../deployment/database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - mdt_network
    profiles:
      - mongodb

  # Elasticsearch (可选的搜索引擎)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: mdt_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - mdt_network
    profiles:
      - search

  # Kibana (Elasticsearch可视化)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: mdt_kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - mdt_network
    depends_on:
      - elasticsearch
    profiles:
      - search

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: mdt_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../../deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - mdt_network
    profiles:
      - monitoring

  # Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: mdt_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../deployment/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ../../deployment/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=mdt_grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - mdt_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: mdt_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../../deployment/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - mdt_network
    depends_on:
      - mdt-app
      - streamlit
    profiles:
      - production

# 网络配置
networks:
  mdt_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local